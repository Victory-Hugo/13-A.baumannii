#!/bin/bash

# È´òË¥®ÈáèÁªÑË£ÖÈóÆÈ¢òËØäÊñ≠‰∏éËß£ÂÜ≥ÊñπÊ°à - ‰øÆÂ§çÁâàÊú¨
# ÈíàÂØπERR197551Êï∞ÊçÆÁöÑÊ∑±Â∫¶‰ºòÂåñ

# ËÆæÁΩÆË∑ØÂæÑ
raw_data_dir="/mnt/c/Users/Administrator/Desktop/ERR197551"
read1="${raw_data_dir}/ERR197551_1.fastq.gz"
read2="${raw_data_dir}/ERR197551_2.fastq.gz"

# ÂàõÂª∫Êñ∞ÁöÑÂàÜÊûêÁõÆÂΩï
analysis_dir="/mnt/c/Users/Administrator/Desktop/ERR197551_advanced_analysis_fixed"
mkdir -p "$analysis_dir"
cd "$analysis_dir"

echo "üìÅ ÂàÜÊûêÁõÆÂΩï: $analysis_dir"

# Ê£ÄÊü•ËæìÂÖ•Êñá‰ª∂
if [[ ! -f "$read1" ]] || [[ ! -f "$read2" ]]; then
    echo "‚ùå ËæìÂÖ•Êñá‰ª∂‰∏çÂ≠òÂú®:"
    echo "   $read1"
    echo "   $read2"
    exit 1
fi

echo ""
echo "=== Ê≠•È™§1: Êï∞ÊçÆË¥®ÈáèÊ∑±Â∫¶Ê£ÄÊü• ==="

# ‰øÆÂ§çJavaÈóÆÈ¢òÁöÑFastQCËøêË°å
if command -v fastqc &>/dev/null; then
    echo "üîß ËøêË°åFastQCË¥®ÈáèÊ£ÄÊü•..."
    mkdir -p fastqc_output
    
    # Â∞ùËØï‰ΩøÁî®Á≥ªÁªüJavaËøêË°åFastQC
    export JAVA_HOME="/usr/lib/jvm/default-java"
    export PATH="/usr/lib/jvm/default-java/bin:$PATH"
    
    # Áõ¥Êé•Ë∞ÉÁî®FastQCÔºåÁªïËøáÂèØËÉΩÊúâÈóÆÈ¢òÁöÑconda Java
    timeout 300s fastqc "$read1" "$read2" -o fastqc_output --threads 4 --extract || {
        echo "‚ö†Ô∏è  FastQCËøêË°åÈÅáÂà∞ÈóÆÈ¢òÔºåÂ∞ùËØïÂü∫Á°ÄË¥®ÈáèÊ£ÄÊü•..."
        
        # Âü∫Á°ÄË¥®ÈáèÁªüËÆ°‰Ωú‰∏∫Â§áÈÄâ
        echo "üìä Âü∫Á°ÄÂ∫èÂàóÁªüËÆ°:"
        echo "Read1 Ë°åÊï∞: $(zcat "$read1" | wc -l)"
        echo "Read2 Ë°åÊï∞: $(zcat "$read2" | wc -l)"
        echo "Read1 Â∫èÂàóÊï∞: $(($(zcat "$read1" | wc -l) / 4))"
        echo "Read2 Â∫èÂàóÊï∞: $(($(zcat "$read2" | wc -l) / 4))"
        
        # Ê£ÄÊü•Á¨¨‰∏ÄÊù°Â∫èÂàóÁöÑÈïøÂ∫¶
        read_length=$(zcat "$read1" | head -2 | tail -1 | wc -c)
        echo "ËØªÈïø: $((read_length-1)) bp"
    }
    echo "‚úÖ Ë¥®ÈáèÊ£ÄÊü•ÂÆåÊàê"
else
    echo "‚ö†Ô∏è  FastQCÊú™ÂÆâË£ÖÔºåË∑≥ËøáË¥®ÈáèÊ£ÄÊü•"
fi

echo ""
echo "=== Ê≠•È™§2: Â∫èÂàóÂéªÈáçÂíåËøáÊª§ ==="

# ‰øÆÂ§çBBToolsÈóÆÈ¢ò - Áõ¥Êé•‰ΩøÁî®ÂéüÂßãÊï∞ÊçÆÊàñÁÆÄÂçïÂ§ÑÁêÜ
if command -v bbduk.sh &>/dev/null; then
    echo "üîß Â∞ùËØï‰ΩøÁî®BBToolsËøõË°åÊï∞ÊçÆÊ∏ÖÁêÜ..."
    
    # ËÆæÁΩÆËæÉÂ∞èÁöÑÂÜÖÂ≠òÈÅøÂÖçJavaÈóÆÈ¢ò
    bbduk.sh \
        in1="$read1" \
        in2="$read2" \
        out1=cleaned_1.fastq.gz \
        out2=cleaned_2.fastq.gz \
        qtrim=rl \
        trimq=20 \
        minlen=50 \
        threads=4 \
        -Xmx4g 2>/dev/null
    
    if [[ -f "cleaned_1.fastq.gz" ]] && [[ -f "cleaned_2.fastq.gz" ]]; then
        echo "‚úÖ BBToolsÊï∞ÊçÆÊ∏ÖÁêÜÂÆåÊàê"
        cleaned_read1="$(pwd)/cleaned_1.fastq.gz"
        cleaned_read2="$(pwd)/cleaned_2.fastq.gz"
    else
        echo "‚ö†Ô∏è  BBToolsÂ§±Ë¥•Ôºå‰ΩøÁî®ÂéüÂßãÊï∞ÊçÆ"
        cleaned_read1="$read1"
        cleaned_read2="$read2"
    fi
else
    echo "‚ö†Ô∏è  BBToolsÊú™ÂÆâË£ÖÔºå‰ΩøÁî®ÂéüÂßãÊï∞ÊçÆ"
    cleaned_read1="$read1"
    cleaned_read2="$read2"
fi

# È™åËØÅÊ∏ÖÁêÜÂêéÁöÑÊñá‰ª∂
echo "üîç ‰ΩøÁî®ÁöÑËæìÂÖ•Êñá‰ª∂:"
echo "   Read1: $cleaned_read1"
echo "   Read2: $cleaned_read2"
ls -lh "$cleaned_read1" "$cleaned_read2" 2>/dev/null || echo "‚ö†Ô∏è  Êüê‰∫õÊñá‰ª∂ÂèØËÉΩ‰∏çÂ≠òÂú®"

echo ""
echo "=== Ê≠•È™§3: Â§öÁßçÈ´òÁ∫ßÁªÑË£ÖÁ≠ñÁï• ==="

# Ê∏ÖÁêÜ‰πãÂâçÂ§±Ë¥•ÁöÑÁõÆÂΩï
echo "üßπ Ê∏ÖÁêÜ‰πãÂâçÁöÑÁªÑË£ÖÁõÆÂΩï..."
rm -rf strategyA_strict strategyB_coverage strategyC_megahit

# Á≠ñÁï•A: SPAdes + ‰∏•Ê†ºÂèÇÊï∞
echo "üîß Á≠ñÁï•A: SPAdesÊúÄ‰∏•Ê†ºÂèÇÊï∞..."
mkdir -p strategyA_strict

if [[ -f "$cleaned_read1" ]] && [[ -f "$cleaned_read2" ]]; then
    spades.py \
        --isolate \
        --pe1-1 "$cleaned_read1" \
        --pe1-2 "$cleaned_read2" \
        --threads 8 \
        --memory 12 \
        -k 21,33,55,77 \
        -o strategyA_strict 2>&1 | tee strategyA_strict.log
    
    if [[ $? -eq 0 ]] && [[ -f "strategyA_strict/contigs.fasta" ]]; then
        echo "‚úÖ Á≠ñÁï•AÂÆåÊàê"
    else
        echo "‚ùå Á≠ñÁï•AÂ§±Ë¥•ÔºåÊü•ÁúãÊó•Âøó: strategyA_strict.log"
    fi
else
    echo "‚ùå Á≠ñÁï•AË∑≥Ëøá: ËæìÂÖ•Êñá‰ª∂‰∏çÂ≠òÂú®"
fi

# Á≠ñÁï•B: ‰ΩøÁî®Ë¶ÜÁõñÂ∫¶ËøáÊª§
echo "üîß Á≠ñÁï•B: SPAdes + Ë¶ÜÁõñÂ∫¶ËøáÊª§..."
mkdir -p strategyB_coverage

if [[ -f "$cleaned_read1" ]] && [[ -f "$cleaned_read2" ]]; then
    spades.py \
        --isolate \
        --pe1-1 "$cleaned_read1" \
        --pe1-2 "$cleaned_read2" \
        --threads 8 \
        --memory 12 \
        --cov-cutoff 10 \
        -k 21,33,55 \
        -o strategyB_coverage 2>&1 | tee strategyB_coverage.log
    
    if [[ $? -eq 0 ]] && [[ -f "strategyB_coverage/contigs.fasta" ]]; then
        echo "‚úÖ Á≠ñÁï•BÂÆåÊàê"
    else
        echo "‚ùå Á≠ñÁï•BÂ§±Ë¥•ÔºåÊü•ÁúãÊó•Âøó: strategyB_coverage.log"
    fi
else
    echo "‚ùå Á≠ñÁï•BË∑≥Ëøá: ËæìÂÖ•Êñá‰ª∂‰∏çÂ≠òÂú®"
fi

# Á≠ñÁï•C: MEGAHIT (ÈÄÇÂêàÈ´òË¶ÜÁõñÂ∫¶Êï∞ÊçÆ)
if command -v megahit &>/dev/null; then
    echo "üîß Á≠ñÁï•C: MEGAHITÁªÑË£Ö..."
    
    if [[ -f "$cleaned_read1" ]] && [[ -f "$cleaned_read2" ]]; then
        megahit \
            -1 "$cleaned_read1" \
            -2 "$cleaned_read2" \
            -o strategyC_megahit \
            -t 8 \
            --min-contig-len 500 \
            --k-min 21 \
            --k-max 77 \
            --k-step 10 \
            --force 2>&1 | tee strategyC_megahit.log
        
        # Ê£ÄÊü•MEGAHITÊòØÂê¶ÊàêÂäüÂÆåÊàê
        if [[ $? -eq 0 ]] && [[ -f "strategyC_megahit/final.contigs.fa" ]]; then
            echo "‚úÖ MEGAHITÁªÑË£ÖÂÆåÊàê"
        else
            echo "‚ùå MEGAHITÁªÑË£ÖÂ§±Ë¥•ÔºåÊü•ÁúãÊó•Âøó: strategyC_megahit.log"
        fi
    else
        echo "‚ùå Á≠ñÁï•CË∑≥Ëøá: ËæìÂÖ•Êñá‰ª∂‰∏çÂ≠òÂú®"
    fi
else
    echo "‚ö†Ô∏è  MEGAHITÊú™ÂÆâË£ÖÔºåË∑≥ËøáÁ≠ñÁï•C"
fi

echo ""
echo "=== Ê≠•È™§4: ÁªìÊûúÂØπÊØîÂàÜÊûê ==="

echo "üìä ÂêÑÁ≠ñÁï•ÁªÑË£ÖÁªìÊûúÂØπÊØî:"
printf "%-18s | %-9s | %-12s | %-13s | %s\n" "Á≠ñÁï•" "ContigsÊï∞" "Âü∫Âõ†ÁªÑÂ§ßÂ∞è" "ÊúÄÈïøContig" "N50"
printf "%-18s | %-9s | %-12s | %-13s | %s\n" "------------------" "---------" "------------" "-------------" "----"

for strategy in "strategyA_strict" "strategyB_coverage" "strategyC_megahit"; do
    if [[ "$strategy" == "strategyC_megahit" ]]; then
        contigs_file="$strategy/final.contigs.fa"
    else
        contigs_file="$strategy/contigs.fasta"
    fi
    
    if [[ -f "$contigs_file" ]]; then
        contigs_count=$(grep "^>" "$contigs_file" | wc -l)
        genome_size=$(grep -v "^>" "$contigs_file" | tr -d '\n' | wc -c)
        
        # Ëé∑ÂèñÊúÄÈïøcontigÈïøÂ∫¶
        if [[ "$strategy" == "strategyC_megahit" ]]; then
            longest_contig=$(grep "^>" "$contigs_file" | grep -o "len=[0-9]*" | cut -d'=' -f2 | sort -nr | head -1)
        else
            longest_contig=$(grep "^>" "$contigs_file" | grep -o "length_[0-9]*" | cut -d'_' -f2 | sort -nr | head -1 2>/dev/null || echo "N/A")
        fi
        
        # ÁÆÄÂçïN50ËÆ°ÁÆó
        if [[ "$strategy" == "strategyC_megahit" ]]; then
            grep "^>" "$contigs_file" | grep -o "len=[0-9]*" | cut -d'=' -f2 | sort -nr > lengths.tmp
        else
            grep "^>" "$contigs_file" | grep -o "length_[0-9]*" | cut -d'_' -f2 | sort -nr > lengths.tmp 2>/dev/null
        fi
        
        if [[ -s lengths.tmp ]]; then
            total_length=0
            while read length; do
                if [[ -n "$length" ]] && [[ "$length" =~ ^[0-9]+$ ]]; then
                    total_length=$((total_length + length))
                fi
            done < lengths.tmp
            
            half_length=$((total_length / 2))
            cumulative=0
            n50="N/A"
            
            while read length; do
                if [[ -n "$length" ]] && [[ "$length" =~ ^[0-9]+$ ]]; then
                    cumulative=$((cumulative + length))
                    if [[ $cumulative -ge $half_length ]]; then
                        n50=$length
                        break
                    fi
                fi
            done < lengths.tmp
        else
            n50="N/A"
        fi
        
        genome_mb=$(echo "scale=2; $genome_size/1000000" | bc 2>/dev/null || echo "N/A")
        
        printf "%-18s | %-9s | %-12s | %-13s | %s\n" \
            "$strategy" "$contigs_count" \
            "${genome_mb}Mb" "$longest_contig" "$n50"
        
        rm -f lengths.tmp
    else
        printf "%-18s | %-9s | %-12s | %-13s | %s\n" \
            "$strategy" "FAILED" "-" "-" "-"
        
        # ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
        if [[ -f "${strategy}.log" ]]; then
            echo "    ÈîôËØØÊó•ÂøóÊëòË¶Å:"
            tail -3 "${strategy}.log" | sed 's/^/    /'
        fi
    fi
done

echo ""
echo "=== Ê≠•È™§5: Êé®ËçêÊñπÊ°à ==="

# ÊâæÂà∞ÊúÄÂ•ΩÁöÑÁªìÊûú
best_strategy=""
min_contigs=999999
best_file=""
best_genome_size=0

for strategy in "strategyA_strict" "strategyB_coverage" "strategyC_megahit"; do
    if [[ "$strategy" == "strategyC_megahit" ]]; then
        contigs_file="$strategy/final.contigs.fa"
    else
        contigs_file="$strategy/contigs.fasta"
    fi
    
    if [[ -f "$contigs_file" ]]; then
        contigs_count=$(grep "^>" "$contigs_file" | wc -l)
        genome_size=$(grep -v "^>" "$contigs_file" | tr -d '\n' | wc -c)
        
        # ÈÄâÊã©contigsÊï∞ÈáèÂ∞ë‰∏îÂü∫Âõ†ÁªÑÂ§ßÂ∞èÂêàÁêÜÁöÑÁ≠ñÁï•
        if [[ $contigs_count -lt $min_contigs ]] && [[ $genome_size -gt 1000000 ]]; then
            min_contigs=$contigs_count
            best_strategy=$strategy
            best_file=$contigs_file
            best_genome_size=$genome_size
        fi
    fi
done

if [[ -n "$best_strategy" ]]; then
    echo "üèÜ Êé®ËçêÁ≠ñÁï•: $best_strategy"
    echo "üìÅ ÊúÄ‰Ω≥ÁªìÊûúÊñá‰ª∂: $best_file"
    echo "üìä Âü∫Âõ†ÁªÑÂ§ßÂ∞è: $(echo "scale=2; $best_genome_size/1000000" | bc)Mb"
    echo "üìä ContigsÊï∞Èáè: $min_contigs"
    
    # Â§çÂà∂ÊúÄ‰Ω≥ÁªìÊûúÂà∞‰∏ªÁõÆÂΩï
    cp "$best_file" "BEST_assembly_contigs.fasta"
    echo "‚úÖ ÊúÄ‰Ω≥ÁªìÊûúÂ∑≤Â§çÂà∂‰∏∫ BEST_assembly_contigs.fasta"
    
    # ÁîüÊàêÁÆÄÂçïÁöÑÁªüËÆ°Êä•Âëä
    echo ""
    echo "üìã ËØ¶ÁªÜÁªüËÆ°Êä•Âëä:"
    echo "ÊÄªÂ∫èÂàóÈïøÂ∫¶: $(grep -v "^>" BEST_assembly_contigs.fasta | tr -d '\n' | wc -c) bp"
    echo "ÊúÄÂ§ßcontig: $(grep "^>" BEST_assembly_contigs.fasta | head -1)"
    
else
    echo "‚ö†Ô∏è  Ê≤°ÊúâÊâæÂà∞Êª°ÊÑèÁöÑÁªÑË£ÖÁªìÊûú"
    echo "üîç Âª∫ËÆÆÊ£ÄÊü•ËæìÂÖ•Êï∞ÊçÆË¥®ÈáèÂíåÁªÑË£ÖÂèÇÊï∞"
fi

echo ""
echo "üéØ ÂêéÁª≠Âª∫ËÆÆ:"
echo "1. ‰ΩøÁî®QUASTËøõË°åËØ¶ÁªÜË¥®ÈáèËØÑ‰º∞: quast.py BEST_assembly_contigs.fasta"
echo "2. Áî®CheckMÊ£ÄÊü•Âü∫Âõ†ÁªÑÂÆåÊï¥ÊÄß"
echo "3. ‰ΩøÁî®Kraken2Ê£ÄÊµãÊΩúÂú®Ê±°Êüì"
echo "4. Â¶ÇÊûúÁªìÊûú‰∏çÊª°ÊÑèÔºåËÄÉËôëË∞ÉÊï¥ÁªÑË£ÖÂèÇÊï∞"

echo ""
echo "üìÅ ÊâÄÊúâÁªìÊûúÊñá‰ª∂‰ΩçÁΩÆ: $analysis_dir"
echo "üèÅ ‰øÆÂ§çÁâàÈ´òÁ∫ßÂàÜÊûêÂÆåÊàêÔºÅ"
